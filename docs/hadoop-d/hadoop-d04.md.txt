+++
Description = "Hadoop Part 4 - 搭建 Hadoop 开发环境"
Tags = ["hadoop","大数据","课程"]
Categories = ["hadoop"]

date = "2021-04-01T23:40:00+08:00"
draft = false
title = "Hadoop Part 4 - 搭建 Hadoop 开发环境"
toc = true
authors = "heis"
weight = 400
+++

## 【版本】

当前版本号`v20220125`
<div class="tbl-start"></div>

|版本|修改说明|
|-|-|
|v20220125|升级到依赖Hadoop 3|
|v20210416|修正一些拼写错误|
|v20210401|初始化版本|

<div class="tbl-end" style="height:10px"></div>

## Hadoop Part 4 - 搭建 Hadoop 开发环境

### 【实验目的】
- 掌握 JDK 的安装和环境变量的设置
- 掌握 IDEA 的安装和使用
- 掌握 Maven 的安装、配置和使用命令

### 【实验环境】
- Windows 7 以上64位操作系统

### 【实验资源】
- Hadoop
- <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank">JDK 8</a> - Java Development Kit是 Oracle 公司针对Java开发人员发布的免费软件开发工具包，是 Java 开发必备的开发工具。
- <a href="https://www.jetbrains.com/idea/" target="_blank">Intellij IDEA</a> - 业界简称IDEA，是 jetbrains 公司推出的和 Eclipse 齐名的 Java 集成开发环境（IDE）。
- <a href="https://maven.apache.org/" target="_blank">Apache Maven</a> - Apache Maven，是一个软件项目管理及自动构建工具，由Apache软件基金会所提供。是 Java 构建打包最广泛使用的工具。
```
下载链接：https://pan.baidu.com/s/1ghde86wcK6pwg1fdSSWg0w
提取码：v3wv
```

### 【实验步骤】
1. 在 Windows 运行安装 jdk-8u261-windows-x64.exe，安装过程略。此处以安装到`d:\jdk8`为例。安装完结束以后目录架构如下：目录架构如下：
```
d:\jdk8
  |-bin/
  |-lib/
  |-include/
  |-jre/            
  |-legal/
  |-javafx-src.zip  
  |-jmc.txt
  |-src.zip
  |-COPYRIGHT
  |-release
  |-LICENSE
  |-README.html
```

2. 进入Windows的环境变量配置界面，配置以下环境变量。如果系统C盘会还原，每次重启电脑都需要配置此环境变量。注意修改 JDK 的安装目录为你实际安装目录。
![](/static/img/hadoop-d04/shuxing.png)
![](/static/img/hadoop-d04/hjbl.png)
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-14-11.png)
```
#新增
JAVA_HOME=D:\jdk8
CLASSPATH=%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar

#修改PATH，在PATH环境变量原有值后面追加
;%JAVA_HOME%\bin;
```

3. 打开Windows 的命令行终端，运行以下命令，测试是否有`JDK`的版本输出。
```
java -version
```

4. 运行`ideaIC-2021.2.exe`，指定目录安装 IDEA，这里以`d:\idea`为例。安装完成以后目录架构如下：
```
d:\idea\ideaIC-2021.2.1.win
  |-bin\               
  |-build.txt         
  |-jbr\               
  |-lib\               
  |-license           
  |-LICENSE.txt       
  |-NOTICE.txt        
  |-plugins\           
  |-product-info.json 
  |-redist\         
```

5. 编辑`d:\idea\ideaIC-2021.2.1.win\bin`目录下的`idea.exe.vmoptions`和`idea64.exe.vmoptions`，在文件末尾加上以下代码，让 IDEA 默认使用UTF8编码。
```
-Dfile.encoding=UTF-8
```

6. 解压`apache-maven-3.6.3-bin-custom.zip`，这里以解压到`d:\maven363`为例。这个 Maven 版本经过老师修改，已经内置了一个 repos 文件夹，里面包含 hadoop 2.7.3 开发包的仓库（Repository）。
```
d:\maven363
  |-bin/      
  |-boot/     
  |-conf/     
  |-lib/      
  |-LICENSE   
  |-NOTICE    
  |-README.txt
  |-repos/       
```

7. 编辑`d:\maven363\conf\settings.xml`文件。在约54行修改本地仓库（localRepository）路径配置。这里注意修改为你的 Maven 的实际安装路径。
```
<settings ...>
...
<localRepository>D:/maven363/repos</localRepository>
...
</settings>
```

8. 编辑`d:\maven363\conf\settings.xml`文件。在约148行`<mirrors>`标签内增加远程仓库镜像地址。开发过程中依赖的 Jar 包可以通过配置从此地址下载。
- 如果电脑无法联网，可以修改指向内网的仓库镜像。
```
<mirror>
  <id>maven-public</id>
  <mirrorOf>*</mirrorOf>
  <name>maven-public</name>
  <url>http://192.168.1.50:8081/repository/maven-public</url>
</mirror>
```
- 如果电脑可以联网，可以修改指向阿里云的仓库镜像。
```
<mirror>
  <id>nexus-aliyun</id>
  <mirrorOf>*</mirrorOf>
  <name>Nexus aliyun</name>
  <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
```

9. 进入Windows的环境变量配置界面，配置以下环境变量。
```
#新增
MAVEN_HOME=D:\maven363

#修改PATH，在PATH环境变量原有值后面追加
;%MAVEN_HOME%\bin;
```

10. 打开Windows 的命令行终端，运行以下命令，测试是否有`Maven`的版本输出。
```
mvn -version
```

11. 启动IDEA，运行`d:\idea\ideaIC-2021.2.1.win\bin\idea.exe`。新建一个项目。
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-46-09.png)

12. 新建一个 Maven 项目，`Project SDK`选择 1.8，如果没有，则点击`Add JDK...`，指向你的 JDK 的安装目录。
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-46-53.png)
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-47-31.png)
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-47-55.png)

13. 新建一个开发项目，命名为`hadoopexp+你学号后3位`。
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-49-00.png)

14. 创建成功以后，可以看到项目的整体目录架构。
![](/static/img/hadoop-d04/Snipaste_2021-03-31_15-50-00.png)

15. 修改 IDEA 的 Maven 配置，指向本地安装的 Maven。这里注意替换为你的 Maven 的实际安装目录。
![](/static/img/hadoop-d04/Snipaste_2021-04-01_08-03-49.png)
![](/static/img/hadoop-d04/Snipaste_2021-04-01_08-06-39.png)

16. 修改项目下的`pom.xml`文件，此文件是 Maven 项目的配置文件。
```
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>hadoop</groupId>
    <artifactId>hadoop-exp</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <hadoop.version>3.3.1</hadoop.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-hdfs</artifactId>
            <version>${hadoop.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hbase</groupId>
            <artifactId>hbase-client</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hbase</groupId>
            <artifactId>hbase-server</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.hbase</groupId>
            <artifactId>hbase-server</artifactId>
            <version>1.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.9.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <archive>
                        <!--<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>-->
                        <manifest>
                            <!-- main()所在的类，注意修改为你的Main主类 -->
                            <mainClass>hadoop.mapreduce.wc.WordCountMain</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```

17. 在项目`hadoop-exp\src\main\java`下创建一个名为`hadoop+你学号后3位`的包。注意替换为你学号后3位。
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-46-52.png)

18. 在你创建的包下面，再创建一个名为`Hello`的类（class）。
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-48-25.png)
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-48-47.png)

19. 在`Hello`这个类中，编写一个`main`方法，打印出以下内容。记录你编写的代码,注意替换为你学号后3位。
```
Hello from 你学号后3位
```
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-56-19.png)
![](/static/img/hadoop-d04/Snipaste_2021-04-02_23-57-15.png)

20. JUnit 是 Java 开发中最常用的单元测试框架，可以帮助测试我们编写的代码。JUnit 非常容易上手。我们可以新建一个 JUnit 测试类学习使用它。

21. 在项目`hadoop-exp\src\test\java`下创建一个名为`hadoop+你学号后3位`的包。注意替换为你学号后3位。

22. 在你刚创建的包下面创建一个名为`HelloJUnit`的类。

23. 编辑`HelloJUnit`类，输入下面的代码，运行查看测试结果。注意替换为你学号后3位。
```
package hadoop+你学号后3位;

import org.junit.Test;
import static org.junit.Assert.*;

public class HelloJUnit {
    @Test
    public void test1(){
		//第1个参数时期待值，第2个参数是我们需要测试的值
        assertEquals(2,1+1);//测试期望两者相等
        assertEquals("你好","你"+"好");//测试期望两者相等
        assertTrue(3==(1+1));//测试结果期望为 false
        assertNotEquals("帅哥","帅锅");//测试期望两者不相等
    }
}
```
![](/static/img/hadoop-d04/Snipaste_2021-04-03_00-15-31.png)

24. 如果结果显示是绿色的勾，则表示单元测试成功。如果是交叉，则表示测试失败。
![](/static/img/hadoop-d04/Snipaste_2021-04-03_00-23-55.png)

25. 修改以上`HelloJUnit`类，重新运行，让测试成功。并记录你修改的代码。

26. 编写一个`test2`方法，测试以下2个字符串是否相等。
```
字符串1:1ll1ll1l11ll1l
字符串2:1ll1ll1ll1ll1l
```

