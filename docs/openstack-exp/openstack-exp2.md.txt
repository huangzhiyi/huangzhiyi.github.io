+++
Description = "云计算部署实战Part2"
Tags = ["openstack","部署"]
Categories = ["openstack"]

date = "2021-02-28T16:42:51+08:00"
draft = false
title = "Part 2 - 配置计算节点和控制节点"
toc = true

authors = "heis"
weight = 200
+++

## 【版本】

当前版本号`v20210324`
<div class="tbl-start"></div>

|版本|修改说明|
|-|-|
|v20210324|加入验证部分|
|v20210301|修正控制节点步骤3的说明|
|v20210227|初始化版本|

<div class="tbl-end" style="height:10px"></div>

## 【实验名称】

云计算部署实战 Part 2 - 配置计算节点和控制节点

## 【实验目的】
- 掌握虚拟机的克隆和配置
- 掌握 Openstack 计算节点和控制节点的配置

## 【实验环境】
- 内存：至少4G
- 硬盘：至少空余40G
- 操作系统: 64位 Windows系统。

## 【实验资源】
- FinalShell
- CentOS 7 系统镜像
- VirtualBox
- Openstack 源

## 【实验步骤】

### 计算节点配置步骤
1. 通过复制（克隆） Part1 制作的`OpenstackTmpl`模板镜像，新创建一个计算节点镜像。
<div class="warning">复制要确保虚拟机处于关闭的状态</div>

![](/static/img/openstack-exp02/Snipaste_2022-02-08_11-36-30.png)

2. 虚拟机名称命名为`Computer+你的学号后3位`。
![](/static/img/openstack-exp02/Snipaste_2022-02-08_11-39-06.png)

3. 启动计算节点，并在 FinalShell 配置 root 用户进行登录。此处过程略。

4. 设置计算节点主机名，注意替换学号。例如你的学号是221，则主机名为`computer221`。
```
hostnamectl set-hostname computer+你的学号后3位
```

5. 输出hostname 查看是否修改成功。
```
hostname
```

6. 修改计算节点IP为10.0.0.31。
```
vi /etc/sysconfig/network-scripts/ifcfg-eth0
```
```
IPADDR=10.0.0.31
```

7. 重启计算节点，并使用 root 用户进行SSH登录。

8. 编辑hosts文件，在文件末增加以下代码，把节点名称映射到相应IP。注意替换学号。
<div class="warning">这里注意是在文件末增加内容，不要删除原有内容！</div>

```
vim /etc/hosts
```
```
10.0.0.11 controller+你的学号后3位
10.0.0.31 computer+你的学号后3位
```

9. 打开时间同步配置文件，在文件最后增加以下代码，保存退出。
```
vim /etc/chrony.conf
```
```
server 10.0.0.11 iburst
```

10. 重启时间同步服务
```
systemctl restart chronyd
```

11. 安装 Openstack 客户端和 openstack-selinux
```
yum install python-openstackclient openstack-selinux -y
```

### 控制节点配置步骤
12. 复制 Part1 制作模板镜像，新创建一个控制节点镜像。

![](/static/img/openstack-exp02/Snipaste_2022-02-08_11-36-30.png)

13. 虚拟机名称命名为`Controller+你的学号后3位`。参考以上步骤1和2。
![](/static/img/openstack-exp02/Snipaste_2022-02-08_11-39-06.png)

14. 修改控制节点内存为2G。

![](/static/img/openstack-exp02/Snipaste_2022-02-08_11-52-51.png)

15. 启动控制节点，并使用 root 用户进行登录。设置控制节点主机名，注意替换学号（不符合要求不给分）。
```
hostnamectl set-hostname controller+你的学号后3位
```

16. 输出hostname 查看是否修改成功。
```
hostname
```

17. 重启控制节点。
```
reboot
```

18. 编辑hosts文件，在文件末增加以下代码，把节点名称映射到相应IP。注意替换学号。
```
vim /etc/hosts
```
```
10.0.0.11 controller+你的学号后3位
10.0.0.31 computer+你的学号后3位
```

19. 打开时间同步配置文件，大约在26行，修改 allow 相关代码，保存退出。
```
vim /etc/chrony.conf
```
```
# Allow NTP client access from local network.
allow 10/8
```

20. 安装openstack客户端和openstack-selinux
```
yum install python-openstackclient openstack-selinux -y
```

21. 安装配置 MariaDB
```
yum install mariadb mariadb-server python2-PyMySQL -y
```

22. 修改 MariaDB 的配置。
```
echo '[mysqld]
bind-address = 10.0.0.11
default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8'  >/etc/my.cnf.d/openstack.cnf
```

23. 设置 MariaDB 为开机启动
```
systemctl start mariadb
systemctl enable mariadb
```

24. 开始 MariaDB 安全配置和初始化。
```
mysql_secure_installation
```

25. 修改 MariaDB 的 root 用户密码为123456。
```
Enter current password for root (enter for none): ->回车
Set root password? [Y/n] -> 输入y
New password:   -> 输入123456
Re-enter new password:  -> 输入123456
Remove anonymous users? [Y/n] -> 输入y
Disallow root login remotely? [Y/n]  -> 输入y
Remove test database and access to it? [Y/n] -> 输入y
Reload privilege tables now? [Y/n] -> 输入y
```

26. 安装 RabbitMQ
```
yum install rabbitmq-server -y
```

27. 启动 RabbitMQ，并设置为开机启动
```
systemctl start rabbitmq-server.service
systemctl enable rabbitmq-server.service
```

28. 新增 RabbitMQ 用户。用户名为`openstack`，密码为`RABBIT_PASS`。
```
rabbitmqctl add_user openstack RABBIT_PASS
```
> 正常应该返回 Creating user "openstack" ...

29. 设置 RabbitMQ 用户 openstack 的权限。
```
rabbitmqctl set_permissions openstack ".*" ".*" ".*"
```
> 正常应该返回 Setting permissions for user "openstack" in vhost "/" ...

30. RabbitMQ 启用`rabbitmq_management`插件。
```
rabbitmq-plugins enable rabbitmq_management
```
> 正常应该返回类似以下信息
```
The following plugins have been enabled:
  mochiweb
  webmachine
  rabbitmq_web_dispatch
  amqp_client
  rabbitmq_management_agent
  rabbitmq_management

Applying plugin configuration to rabbit@controller999... started 6 plugins.
```

31. 安装 Memcached
```
yum install memcached python-memcached -y
```

32. 修改 Memcached 的配置，替换127.0.0.1为控制节点内网IP。
```
sed -i 's#127.0.0.1#10.0.0.11#g' /etc/sysconfig/memcached
```

33. 重启 Memcached，并设置为开机启动。
```
systemctl restart memcached.service
systemctl enable memcached.service
```

### 计算节点验证

34. 重启`计算节点`虚拟机。

35. 在`计算节点`上查看以下服务是否是 active 的状态，注意是 active，不是activing。关于服务的状态可以查看 [系统服务状态解释](openstack-summary/#系统服务状态解释)
```
systemctl status chronyd
```

### 控制节点验证

36. 重启`控制节点`虚拟机。

37. 在`控制节点`上查看以下服务是否是 active 的状态。正常应该出现4个服务 active。
```
systemctl -a |grep -E "UNIT|chronyd|memcached|rabbitmq|mariadb"
```

## 思考和探索
1. 为什么服务器的时间需要同步?
2. 上面提到的一些组件，包括chrony、MariaDB、RabbitMQ、Memcached，你都知道他们的主要功能吗？
